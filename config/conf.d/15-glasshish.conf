filter {

  if [type] == "glassfish3-server" {
    multiline {
      "negate" => true
      "pattern" => "^\[\#\|\d{4}"
      "patterns_dir" => "/etc/logstash/patterns"
      "what" =>"previous"
    }
    grok {
      match => [ 
        "message", "(?m)\[\#\|%{TIMESTAMP_ISO8601:timestamp}\|%{WORD:log_level}\|%{DATA:product_name_version}\|%{DATA:logger}\|%{DATA:thread}\|%{DATA:message}\|\#\]"
      ]
      overwrite => [ "message" ]
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
    }
    date {
      match => ["timestamp", "ISO8601"]
      remove_field => [ "timestamp" ]
    }
  }

  if [type] == "glassfish4-server" {
    multiline {
      "negate" => true
      "pattern" => "^\[\d{4}"
      "patterns_dir" => "/etc/logstash/patterns"
      "what" =>"previous"
    }
    grok {
      match => [
        "message", "(?m)\[%{TIMESTAMP_ISO8601:timestamp}\] \[%{DATA:product_name_version}\] \[%{WORD:log_level}\] \[%{DATA:message_id}\] \[%{DATA:logger}\] \[%{DATA:thread}\] \[timeMillis: %{INT:millis}\] \[levelValue: %{INT:levelValue}\] \[\[%{DATA:message}\]\]"
      ]
      overwrite => [ "message" ]
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
    }
    date {
      match => ["timestamp", "ISO8601"]
      remove_field => [ "timestamp" ]
    }
  }
}

